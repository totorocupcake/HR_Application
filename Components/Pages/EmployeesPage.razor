@page "/Employees"

@using System.Net.Http.Json
@using HR_Application.Models
@using MudBlazor

@inject OracleDataService OracleDataService
@inject ISnackbar Snackbar

<h3></h3>
@if (Employees == null)
{
    <p><em>Loading...</em></p>
}

else
{
   
    <MudTable @ref="tableRef" Class="compact-table" Items="@Employees" Dense="true" Hover="true" ReadOnly="false" CanCancelEdit="true" Striped="true"
              @bind-SelectedItem="selectedItem1" SortLabel="Sort By" CommitEditTooltip="Commit Edit" FixedHeader="true" FixedFooter="true" Height="77vh" FooterClass="py-1"
              RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues" filter="FilterFunc!" Loading=loading 
          RowEditCommit=@(async (emp) => await ItemHasBeenCommitted(emp)) IsEditRowSwitchingBlocked="false" ApplyButtonPosition="@applyButtonPosition" EditButtonPosition="@editButtonPosition" EditTrigger="@editTrigger">
    <ToolBarContent>
        <MudText Typo="Typo.h6">View / Edit Employees</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        
            <MudTh><MudTableSortLabel SortBy="new Func<Employee, object>(x => x.Id)" Class="compact-sort-label">Employee ID</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel  SortBy="new Func<Employee, object>(x => x.FirstName!)" Class="compact-sort-label">First Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel  InitialDirection="SortDirection.Ascending" SortBy="new Func<Employee, object>(x => x.LastName)" Class="compact-sort-label">Last Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel  SortBy="new Func<Employee, object>(x => x.Email)" Class="compact-sort-label">Email</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel  SortBy="new Func<Employee, object>(x => x.PhoneNumber!)" Class="compact-sort-label">Phone Number</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel  SortBy="new Func<Employee, object>(x => x.HireDate)" Class="compact-sort-label">Hire Date</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel  SortBy="new Func<Employee, object>(x => x.JobId)" Class="compact-sort-label">Job ID</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel  SortBy="new Func<Employee, object>(x => x.Salary!)" Class="compact-sort-label">Salary</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel  SortBy="new Func<Employee, object>(x => x.CommissionPct!)" Class="compact-sort-label">Commission (%)</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel  SortBy="new Func<Employee, object>(x => x.ManagerId!)" Class="compact-sort-label">Manager ID</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel  SortBy="new Func<Employee, object>(x => x.DepartmentId!)" Class="compact-sort-label">Department ID</MudTableSortLabel></MudTh>
            <MudTh>Delete?</MudTh>
           
      
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context!.Id</MudTd>
        <MudTd DataLabel="First Name">@context!.FirstName</MudTd>
        <MudTd DataLabel="Last Name">@context!.LastName</MudTd>
        <MudTd DataLabel="Email">@context!.Email</MudTd>
        <MudTd DataLabel="Phone Number">@context!.PhoneNumber</MudTd>
        <MudTd DataLabel="Hire Date">@context!.HireDate</MudTd>
        <MudTd DataLabel="Job Id">@context!.JobId</MudTd>
        <MudTd DataLabel="Salary">@context!.Salary</MudTd>
        <MudTd DataLabel="Commission Pct">@(Math.Round((decimal)(context!.CommissionPct ?? 0), 2))</MudTd>
        <MudTd DataLabel="Manager Id">@context!.ManagerId</MudTd>
        <MudTd DataLabel="Department Id">@context!.DepartmentId</MudTd>
        <MudTd  DataLabel="Actions">
            <MudButton OnClick="async () => await DeleteEmployee(context!)"
                       Color="Color.Default"
                       StartIcon="@Icons.Material.Filled.Delete">
            </MudButton>
        </MudTd>
      
    </RowTemplate>
        <RowEditingTemplate>
            <MudTd DataLabel="Id">@context!.Id</MudTd>
            <MudTd DataLabel="FirstName">
                @context!.FirstName
            </MudTd>
            <MudTd DataLabel="LastName">
                @context!.LastName
            </MudTd>
            <MudTd DataLabel="Email">
                <MudTextField @bind-Value="context!.Email" Required Variant="Variant.Text" Margin="Margin.None" />
            </MudTd>
            <MudTd DataLabel="Phone Number">
                <MudTextField @bind-Value="context!.PhoneNumber" Variant="Variant.Text" Margin="Margin.None" />
            </MudTd>
            <MudTd DataLabel="Hire Date">@context!.HireDate</MudTd>
            <MudTd DataLabel="Job Id">
                @context!.JobId
            </MudTd>
            <MudTd DataLabel="Salary">
                <MudNumericField @bind-Value="context!.Salary" Min="0" Variant="Variant.Text" Margin="Margin.None" />
            </MudTd>
            <MudTd DataLabel="Commission Pct">
                @(Math.Round((decimal)(context!.CommissionPct ?? 0), 2))
            </MudTd>
            <MudTd DataLabel="Manager Id">
                @context!.ManagerId
            </MudTd>
            <MudTd DataLabel="Department Id">
                @context!.DepartmentId
            </MudTd>
            <MudTd DataLabel="Actions">
                <MudButton OnClick="async () => await DeleteEmployee(context!)"
                           Color="Color.Default"
                           StartIcon="@Icons.Material.Filled.Delete"
                           Size="Size.Small">
                </MudButton>
            </MudTd>
        </RowEditingTemplate>
    <PagerContent>
        <MudTablePager RowsPerPageString="Records per page" PageSizeOptions="@(new int[] { 20, 50, 100 })" />
    </PagerContent>
</MudTable>

}
@code {
    private MudTable<Employee>? tableRef;
    private List<string> editEvents = new();
    private string searchString = "";
    private Employee? selectedItem1 = null;
    private Employee? elementBeforeEdit;
    private HashSet<Employee> selectedItems1 = new HashSet<Employee>();
    private TableApplyButtonPosition applyButtonPosition = TableApplyButtonPosition.End;
    private TableEditButtonPosition editButtonPosition = TableEditButtonPosition.End;
    private TableEditTrigger editTrigger = TableEditTrigger.RowClick;
    private List<Employee> Employees { get; set; } = new List<Employee>();
    private bool loading =true;

    protected override async Task OnInitializedAsync()
    {
        Employees = await OracleDataService.GetDataForModels<Employee>(0);
        loading = false;
    }

    private void ClearEventLog()
    {
        editEvents.Clear();
    }

    private void AddEditionEvent(string message)
    {
        editEvents.Add(message);
        StateHasChanged();
    }

    private void BackupItem(object element)
    {
        elementBeforeEdit = new()
        {
            Id = ((Employee)element).Id,
            FirstName = ((Employee)element).FirstName,
            LastName = ((Employee)element).LastName,
            Email = ((Employee)element).Email,
            PhoneNumber = ((Employee)element).PhoneNumber,
            HireDate = ((Employee)element).HireDate,
            JobId = ((Employee)element).JobId,
            Salary = ((Employee)element).Salary,
            CommissionPct = ((Employee)element).CommissionPct,
            ManagerId = ((Employee)element).ManagerId,
            DepartmentId = ((Employee)element).DepartmentId,
        };
        AddEditionEvent($"RowEditPreview event: made a backup of Element {((Employee)element).Id}");
    }

    private async Task ItemHasBeenCommitted(object element)
    {
        var employee = (Employee)element;

        AddEditionEvent($"RowEditCommit event: Changes to Element {((Employee)element).Id} committed");

        // Update the database
        await UpdateEmployee(employee);

    }

    private void ResetItemToOriginalValues(object element)
    {
        ((Employee)element).Id = elementBeforeEdit!.Id;
        ((Employee)element).FirstName = elementBeforeEdit.FirstName;
        ((Employee)element).LastName = elementBeforeEdit.LastName;
        ((Employee)element).Email = elementBeforeEdit.Email;
        ((Employee)element).PhoneNumber = elementBeforeEdit.PhoneNumber;
        ((Employee)element).HireDate = elementBeforeEdit.HireDate;
        ((Employee)element).JobId = elementBeforeEdit.JobId;
        ((Employee)element).Salary = elementBeforeEdit.Salary;
        ((Employee)element).CommissionPct = elementBeforeEdit.CommissionPct;
        ((Employee)element).ManagerId = elementBeforeEdit.ManagerId;
        ((Employee)element).DepartmentId = elementBeforeEdit.DepartmentId;
        AddEditionEvent($"RowEditCancel event: Editing of Element {((Employee)element).Id} canceled");
    }

    private bool FilterFunc(Employee element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        var searchLower = searchString.ToLower();

        return (element.LastName?.ToLower().Contains(searchLower) == true) ||
               (element.FirstName?.ToLower().Contains(searchLower) == true) ||
               (element.Email?.ToLower().Contains(searchLower) == true) ||
                 (element.JobId?.ToLower().Contains(searchLower) == true) ||
                 (element.PhoneNumber?.ToLower().Contains(searchLower) == true) ||
                 (element.Id.ToString().Contains(searchLower) == true) ||

                 (element.Salary?.ToString().Contains(searchLower) == true) ||
                 (element.ManagerId?.ToString().Contains(searchLower) == true) ||
                 (element.DepartmentId?.ToString().Contains(searchLower) == true);
    }

    private async Task UpdateEmployee(Employee employee)
    {
        try
        {
            await OracleDataService.UpdateEmployeeAsync(
                employee.Id,
                employee.Salary,
                employee.PhoneNumber,
                employee.Email);

            Snackbar.Add("Employee updated successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private async Task DeleteEmployee(Employee employee)
    {
        try
        {
            await OracleDataService.DeleteEmployeeAsync(employee.Id);
            // Refresh the Employees list after deletion
            Employees = await OracleDataService.GetDataForModels<Employee>(0);
            StateHasChanged();
            Snackbar.Add("Employee deleted successfully!", Severity.Success);

            
            
        }
        catch (Exception ex)
        {
            Employees = await OracleDataService.GetDataForModels<Employee>(0);
            StateHasChanged();
            Snackbar.Add($"Error deleting employee: {ex.Message}", Severity.Error);
        }
    }

}

