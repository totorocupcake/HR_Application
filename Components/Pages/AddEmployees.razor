@page "/addEmployee"

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using HR_Application.Models

@inject OracleDataService OracleDataService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudText Typo="Typo.h6" Class="mb-6">Add New Employee</MudText>
    <MudPaper Class="pa-6" Elevation="3">

        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
            <MudGrid>
                <MudItem xs="12">
                    <MudText Typo="Typo.h6" Class="mb-4">Personal Information</MudText>
                    <MudDivider Class="mb-4" />
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudTextField T="string" Label="First Name" @bind-Value="FirstName" Required="false" />
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudTextField T="string" Label="Last Name" @bind-Value="LastName" Required="true" RequiredError="Last name is required!" />
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudTextField T="string" Label="Email" @bind-Value="Email" Required="true" RequiredError="Email is required!" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField T="string" Label="Phone" @bind-Value="Phone" Required="false" />
                </MudItem>

                <MudItem xs="12" Class="mt-4">
                    <MudText Typo="Typo.h6" Class="mb-4">Employment Information</MudText>
                    <MudDivider Class="mb-4" />
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudDatePicker Label="Hire Date" Editable="true" @bind-Date="HireDate" Placeholder="Select Date" Required="true" RequiredError="Hire Date is required!" />
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudNumericField @bind-Value="Salary" Label="Salary" Variant="Variant.Text" Min="0" Step="100"/>
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudSelect @bind-Value="Job" T="JobDropdownItem" Label="Job" Placeholder="Please Select" Required="true" RequiredError="Job ID is required!">
                        @if (jobs == null)
                         {
                            <MudSelectItem T="JobDropdownItem" Disabled="true">Loading jobs...</MudSelectItem>
                                }
                                else if (!jobs.Any())
                                {
                            <MudSelectItem T="JobDropdownItem" Disabled="true">No jobs available</MudSelectItem>
                                }
                                else
                                {
                                    @foreach (var job in jobs)
                                    {
                                <MudSelectItem Value="@job">@job.JobTitle (@job.JobId)</MudSelectItem>
                                    }
                            }       </MudSelect>
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudSelect @bind-Value="Manager" T="ManagerDropDownItem" Label="Manager" Placeholder="Please Select" ToStringFunc="@(m => m == null ? "None" : $"{m.FirstName} {m.LastName}")">

                        <MudSelectItem T="ManagerDropDownItem" Value="@null">None</MudSelectItem>

                        @if (managers == null)
                         {
                            <MudSelectItem T="ManagerDropDownItem" Disabled="true">Loading managers...</MudSelectItem>
                                }
                                else if (!managers.Any())
                                {
                            <MudSelectItem T="ManagerDropDownItem" Disabled="true">No managers available</MudSelectItem>
                                }
                                else
                                {

                                    @foreach (var manager in managers)
                                    {
                                <MudSelectItem value="@manager">
                                    @manager.FirstName @manager.LastName (@manager.ManagerId)
                                </MudSelectItem>
                                    }
                                }
                    </MudSelect>
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudSelect @bind-Value="Department" T="DepartmentDropDownItem" Label="Department" Placeholder="Please Select" ToStringFunc="@(m => m == null ? "None" : $"{m.DepartmentName} {m.DepartmentId}")">

                        <MudSelectItem T="DepartmentDropDownItem" Value="@null">None</MudSelectItem>

                        @if (departments == null)
                        {
                            <MudSelectItem T="DepartmentDropDownItem" Disabled="true">Loading departments...</MudSelectItem>
                        }
                        else if (!departments.Any())
                        {
                            <MudSelectItem T="DepartmentDropDownItem" Disabled="true">No departments available</MudSelectItem>
                        }
                        else
                        {
                            @foreach (var department in departments)
                            {
                                <MudSelectItem value="@department">
                                    @department.DepartmentName (@department.DepartmentId)
                                </MudSelectItem>
                            }
                        }
                    </MudSelect>
                </MudItem>


                <MudItem xs="12" Class="mt-6 d-flex justify-end">
               
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" DropShadow="false" OnClick="@(() => form!.ResetAsync())" Class="mr-2">Reset</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="AddEmployee">Add Employee</MudButton>
               
                </MudItem>
            </MudGrid>
        </MudForm>
    </MudPaper>
</MudContainer>

@code {
    bool success;
    string[] errors = { };
    MudForm? form;
    private DateTime? HireDate = DateTime.Today;
    public double? Salary { get; set; }
    public JobDropdownItem? Job { get; set; }
    public DepartmentDropDownItem? Department { get; set; }
    public ManagerDropDownItem? Manager { get; set; }
    public string? FirstName { get; set; }
    public string? LastName { get; set; }
    public string? Email { get; set; }
    public string? Phone { get; set; }
    private List<JobDropdownItem>? jobs;
    private List<ManagerDropDownItem>? managers;
    private List<DepartmentDropDownItem>? departments;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            jobs = await OracleDataService.GetJobsForDropDown();
            managers = await OracleDataService.GetManagersForDropDown();
            departments = await OracleDataService.GetDepartmentsForDropDown();
        }
        catch (Exception ex)
        {
            // Handle error (show message, etc.)
            Console.WriteLine($"Error loading jobs: {ex.Message}");
        }
    }

    private async Task AddEmployee()
    {

        await form!.Validate();

        if (!success)
        {
            Snackbar.Add("Please fix validation errors", Severity.Warning);
            return;
        }

        try
        {
            
            var result = await OracleDataService.addEmployeeAsync(
                FirstName,
                LastName!,
                Email!,
                Salary,
                HireDate ?? DateTime.Now, // Handle null case
                Phone,
                Job!.JobId,
                Manager?.ManagerId,
                Department?.DepartmentId
            );

            if (result)
            {
                Snackbar.Add("Employee added successfully!", Severity.Success);
                await form.ResetAsync();
            }
            
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }


}